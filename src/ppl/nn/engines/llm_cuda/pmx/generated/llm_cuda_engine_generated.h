// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LLMCUDAENGINE_PPL_NN_LLM_CUDA_H_
#define FLATBUFFERS_GENERATED_LLMCUDAENGINE_PPL_NN_LLM_CUDA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace ppl {
namespace nn {
namespace llm {
namespace cuda {

struct EngineOptionsParam;
struct EngineOptionsParamBuilder;

struct EngineParam;
struct EngineParamBuilder;

enum EngineParamType : uint8_t {
  EngineParamType_NONE = 0,
  EngineParamType_EngineOptionsParam = 1,
  EngineParamType_MIN = EngineParamType_NONE,
  EngineParamType_MAX = EngineParamType_EngineOptionsParam
};

inline const EngineParamType (&EnumValuesEngineParamType())[2] {
  static const EngineParamType values[] = {
    EngineParamType_NONE,
    EngineParamType_EngineOptionsParam
  };
  return values;
}

inline const char * const *EnumNamesEngineParamType() {
  static const char * const names[3] = {
    "NONE",
    "EngineOptionsParam",
    nullptr
  };
  return names;
}

inline const char *EnumNameEngineParamType(EngineParamType e) {
  if (flatbuffers::IsOutRange(e, EngineParamType_NONE, EngineParamType_EngineOptionsParam)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEngineParamType()[index];
}

template<typename T> struct EngineParamTypeTraits {
  static const EngineParamType enum_value = EngineParamType_NONE;
};

template<> struct EngineParamTypeTraits<ppl::nn::llm::cuda::EngineOptionsParam> {
  static const EngineParamType enum_value = EngineParamType_EngineOptionsParam;
};

bool VerifyEngineParamType(flatbuffers::Verifier &verifier, const void *obj, EngineParamType type);
bool VerifyEngineParamTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct EngineOptionsParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EngineOptionsParamBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CUBLAS_LAYOUT_HINT = 4,
    VT_VERSION = 6
  };
  uint32_t cublas_layout_hint() const {
    return GetField<uint32_t>(VT_CUBLAS_LAYOUT_HINT, 0);
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 2147483647);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CUBLAS_LAYOUT_HINT, 4) &&
           VerifyField<int32_t>(verifier, VT_VERSION, 4) &&
           verifier.EndTable();
  }
};

struct EngineOptionsParamBuilder {
  typedef EngineOptionsParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cublas_layout_hint(uint32_t cublas_layout_hint) {
    fbb_.AddElement<uint32_t>(EngineOptionsParam::VT_CUBLAS_LAYOUT_HINT, cublas_layout_hint, 0);
  }
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(EngineOptionsParam::VT_VERSION, version, 2147483647);
  }
  explicit EngineOptionsParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EngineOptionsParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EngineOptionsParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<EngineOptionsParam> CreateEngineOptionsParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t cublas_layout_hint = 0,
    int32_t version = 2147483647) {
  EngineOptionsParamBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_cublas_layout_hint(cublas_layout_hint);
  return builder_.Finish();
}

struct EngineParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EngineParamBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  ppl::nn::llm::cuda::EngineParamType value_type() const {
    return static_cast<ppl::nn::llm::cuda::EngineParamType>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const ppl::nn::llm::cuda::EngineOptionsParam *value_as_EngineOptionsParam() const {
    return value_type() == ppl::nn::llm::cuda::EngineParamType_EngineOptionsParam ? static_cast<const ppl::nn::llm::cuda::EngineOptionsParam *>(value()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyEngineParamType(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ppl::nn::llm::cuda::EngineOptionsParam *EngineParam::value_as<ppl::nn::llm::cuda::EngineOptionsParam>() const {
  return value_as_EngineOptionsParam();
}

struct EngineParamBuilder {
  typedef EngineParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value_type(ppl::nn::llm::cuda::EngineParamType value_type) {
    fbb_.AddElement<uint8_t>(EngineParam::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(EngineParam::VT_VALUE, value);
  }
  explicit EngineParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EngineParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EngineParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<EngineParam> CreateEngineParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    ppl::nn::llm::cuda::EngineParamType value_type = ppl::nn::llm::cuda::EngineParamType_NONE,
    flatbuffers::Offset<void> value = 0) {
  EngineParamBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline bool VerifyEngineParamType(flatbuffers::Verifier &verifier, const void *obj, EngineParamType type) {
  switch (type) {
    case EngineParamType_NONE: {
      return true;
    }
    case EngineParamType_EngineOptionsParam: {
      auto ptr = reinterpret_cast<const ppl::nn::llm::cuda::EngineOptionsParam *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEngineParamTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEngineParamType(
        verifier,  values->Get(i), types->GetEnum<EngineParamType>(i))) {
      return false;
    }
  }
  return true;
}

inline const ppl::nn::llm::cuda::EngineParam *GetEngineParam(const void *buf) {
  return flatbuffers::GetRoot<ppl::nn::llm::cuda::EngineParam>(buf);
}

inline const ppl::nn::llm::cuda::EngineParam *GetSizePrefixedEngineParam(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ppl::nn::llm::cuda::EngineParam>(buf);
}

inline bool VerifyEngineParamBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ppl::nn::llm::cuda::EngineParam>(nullptr);
}

inline bool VerifySizePrefixedEngineParamBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ppl::nn::llm::cuda::EngineParam>(nullptr);
}

inline void FinishEngineParamBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ppl::nn::llm::cuda::EngineParam> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEngineParamBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ppl::nn::llm::cuda::EngineParam> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cuda
}  // namespace llm
}  // namespace nn
}  // namespace ppl

#endif  // FLATBUFFERS_GENERATED_LLMCUDAENGINE_PPL_NN_LLM_CUDA_H_
